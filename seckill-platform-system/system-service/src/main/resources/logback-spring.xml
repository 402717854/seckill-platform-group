<?xml version="1.0" encoding="UTF-8"?>
<!--logback.xml和logback-spring.xml都可以用来配置logback，但是两者的加载顺序是不一样的，具体顺序如下：
logback.xml->application.properties->logback-spring.xml
从上边的加载顺序可以看出，logback.xml加载早于application.properties，
所以如果你在logback.xml使用了变量时，而恰好这个变量是写在application.properties中，
那么就会获取不到，报上边的错误信息。
no applicable action for [springProfile], current ElementPath is [[configuration][springProfile]]
-->
<configuration scan="true" scanPeriod="30 seconds" debug="false">
    <contextName>SECKILL-SYSTEM</contextName>
    <!--日志文件主目录：这里${user.home}为当前服务器用户主目录-->
    <property name="LOG_HOME" value="/seckill/logs/system"/>
    <!--日志文件名称：这里spring.application.name表示工程名称-->
    <springProperty scope="context" name="APP_NAME" source="spring.application.name"/>

    <property name="log.pattern" value="%contextName- %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{36}) - %msg%n" />

    <!--引入默认配置-->
<!--    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>-->

    <!--引入配置控制台(CONSOLE)-->
    <!--    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
<!--            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>-->
            <Pattern>${log.pattern}</Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--配置日志文件(File)-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--设置策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件路径：这里%d{yyyyMMdd}表示按天分类日志-->
            <FileNamePattern>${LOG_HOME}/${APP_NAME}-%d{yyyyMMdd}.log</FileNamePattern>
            <!--日志保留天数-->
            <MaxHistory>15</MaxHistory>
        </rollingPolicy>
        <!--设置格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
            <!-- 或者使用默认配置 -->
<!--            <pattern>${FILE_LOG_PATTERN}</pattern>-->
            <pattern>${log.pattern}</pattern>
            <charset>utf8</charset>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>100MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!-- 将文件输出设置成异步输出 -->
    <appender name="ASYNC-FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILE"/>
    </appender>

    <!-- 将控制台输出设置成异步输出 -->
    <appender name="ASYNC-CONSOLE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="CONSOLE"/>
    </appender>

    <!--监控sql日志输出,如需监控 Sql 打印，请设置为 INFO -->
    <logger name="jdbc.sqlonly" level="ERROR" additivity="false">
    </logger>

    <logger name="jdbc.resultset" level="ERROR" additivity="false">
    </logger>

    <!--  如想看到表格数据，将OFF改为INFO  -->
    <logger name="jdbc.resultsettable" level="OFF" additivity="false">
    </logger>

    <logger name="jdbc.connection" level="OFF" additivity="false">
    </logger>

    <logger name="jdbc.sqltiming" level="INFO" additivity="false">
    </logger>

    <logger name="jdbc.audit" level="OFF" additivity="false">
    </logger>

    <!-- 多环境配置 按照active profile选择分支 -->
    <springProfile name="dev">
        <!--root节点 全局日志级别，用来指定最基础的日志输出级别-->
        <root level="INFO">
            <appender-ref ref="FILE"/>
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>
    <springProfile name="test">
        <root level="INFO">
            <appender-ref ref="FILE"/>
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>
    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="FILE"/>
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>
</configuration>